{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "d7c6c529-703f-4b0a-b14a-cebd14830c95",
   "metadata": {},
   "outputs": [],
   "source": [
    "def promedio (vals):\n",
    "    \"\"\"\n",
    "    Calcula el promedio de una lista de numeros.\n",
    "\n",
    "    Parámetros\n",
    "    ----------\n",
    "    vals: lista\n",
    "    » Lista con números.\n",
    "\n",
    "    Retorna\n",
    "    ---------\n",
    "    promedio: float\n",
    "    » El promedio aritmetico de los números.\n",
    "    \"\"\"\n",
    "    return sum(vals) / len(vals)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "0bf6e3b4-3e65-402f-9a4a-676384f85ad0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def mediana (vrad1):\n",
    "    \"\"\"\n",
    "    Calcula la mediana de los datos de una lista de números.\n",
    "\n",
    "    Parámetros\n",
    "    ----------\n",
    "    vals: lista\n",
    "    » Lista con números.\n",
    "    lista = lista\n",
    "    » Lista de datos ordenados.\n",
    "    largo = float\n",
    "    » Cantidad de datos en la lista.\n",
    "\n",
    "    Retorna\n",
    "    ---------\n",
    "    mediana: float\n",
    "    » Calcula la mediana de los datos.\n",
    "    \"\"\"\n",
    "\n",
    "    lista = sorted(vrad1)\n",
    "    largo = len(vrad1)\n",
    "\n",
    "    if largo % 2 == 1:\n",
    "        mediana = lista[largo // 2]\n",
    "    else:\n",
    "        centro1 = lista[largo // 2 - 1]\n",
    "        centro2 = lista[largo // 2]\n",
    "        mediana = (centro1 + centro2) / 2\n",
    "\n",
    "    return mediana"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "7b0a13c4-488b-47e2-9ac6-8045fc952646",
   "metadata": {},
   "outputs": [],
   "source": [
    "def moda (datos):\n",
    "    \"\"\"\n",
    "    Calcula la moda de una lista de datos.\n",
    "\n",
    "    Args:\n",
    "    - datos (list): Una lista de datos numéricos.\n",
    "\n",
    "    Returns:\n",
    "    - int, list o None: La moda o una lista de modas si hay empate, o None si no hay moda.\n",
    "\n",
    "    La moda es el valor que aparece con mayor frecuencia en la lista de datos. Si hay un empate en la frecuencia\n",
    "    entre varios valores, la función devuelve una lista de esos valores.\n",
    "    \"\"\"\n",
    "    if len(datos) == 0:\n",
    "        return None \n",
    "\n",
    "    cuenta = {}  \n",
    "    \n",
    "    for n in datos:\n",
    "        if n in cuenta:\n",
    "            cuenta[n] += 1\n",
    "        else:\n",
    "            cuenta[n] = 1\n",
    "\n",
    "    moda = None\n",
    "    max_cuenta = 0\n",
    "    for n, frec in cuenta.items():\n",
    "        if frec > max_cuenta:\n",
    "            moda = n\n",
    "            max_cuenta = frec\n",
    "        elif frec == max_cuenta and n != moda:\n",
    "            if not isinstance(moda, list):\n",
    "                moda = [moda]\n",
    "            moda.append(n)\n",
    "    \n",
    "    if max_cuenta == 1:\n",
    "        return None\n",
    "    elif isinstance(moda, list):\n",
    "        return moda\n",
    "    else:\n",
    "        return moda"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "1966736a-1977-4200-b6f3-caadbae2abd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rango(vrad1):\n",
    "    rango = max(vrad1) - min(vrad1)\n",
    "    return rango"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "51fb5a92-3d96-4eee-8b64-83262a1a4df3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def varianza (vrad1):\n",
    "    \"\"\"\n",
    "    Calcula la varianza.\n",
    "\n",
    "    Parámetros\n",
    "    ----------\n",
    "    vals: lista\n",
    "    » Lista con números de la cual se calculará la varianza.\n",
    "\n",
    "    Retorna\n",
    "    ---------\n",
    "    Var: float\n",
    "    » Valor de punto flotante donde se muestra la varianza.\n",
    "\n",
    "    Variables\n",
    "    ----------\n",
    "    suma: variable\n",
    "    » sumatoria de la resta entre un valor y la suma de todos los datos, dividido\n",
    "    en la cantidad de datos y todo esto elevado al cuadrado.\n",
    "    \"\"\"\n",
    "    suma = sum((x - (sum(vrad1) / len(vrad1)))**2 for x in vrad1)\n",
    "    var = suma/len(vrad1)\n",
    "    return var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "246850a8-7ab3-454f-b888-57728a6c37ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "def desviacion (vrad1):\n",
    "    \"\"\"\n",
    "    Calcula la desviación estándar de los datos.\n",
    "\n",
    "    Parámetros\n",
    "    ----------\n",
    "    vals: lista\n",
    "    » Lista con números.\n",
    "\n",
    "    Retorna\n",
    "    ---------\n",
    "    desv: float\n",
    "    » La raíz de la varianza.\n",
    "    \"\"\"\n",
    "    desv = sqrt(varianza(vrad1))\n",
    "    return desv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "ccb307e5-411c-43c4-a2ee-1f71ab907526",
   "metadata": {},
   "outputs": [],
   "source": [
    "def MAD (vals):\n",
    "    \"\"\"\n",
    "    Calcula la Desviación Absoluta Media (MAD) de una lista de valores.\n",
    "\n",
    "    Parámetros\n",
    "    ----------\n",
    "    vals: lista de números\n",
    "    » Lista de números de la cual se calculará la MAD.\n",
    "\n",
    "    Retorna\n",
    "    ---------\n",
    "    mad: float\n",
    "    » La Desviación Absoluta Media de los valores en la lista.\n",
    "\n",
    "    Variables\n",
    "    ----------\n",
    "    mediana_valor: float\n",
    "    » La mediana de los valores en la lista, que se utilizará como punto de referencia.\n",
    "    datos: lista de números\n",
    "    » Una lista que contendrá las diferencias absolutas entre cada valor y la mediana.\n",
    "    lista: lista de números\n",
    "    » Una lista ordenada que contiene las diferencias absolutas.\n",
    "    longitud: int\n",
    "    » La cantidad de elementos en la lista 'datos'.\n",
    "    mad: float\n",
    "    » La Desviación Absoluta Media calculada.\n",
    "    \"\"\"\n",
    "    mediana_valor = mediana(vals)\n",
    "    datos = []\n",
    "    for num in vals:\n",
    "        datos_mad = abs(num - mediana_valor)\n",
    "        datos.append(datos_mad)\n",
    "        \n",
    "    lista = sorted(datos)\n",
    "    longitud = len(datos)\n",
    "    \n",
    "    if longitud % 2 == 1:\n",
    "        mad = lista[longitud // 2]\n",
    "    else:\n",
    "        centro1 = lista[longitud // 2 - 1]\n",
    "        centro2 = lista[longitud // 2]\n",
    "        mad = (centro1 + centro2) / 2\n",
    "    \n",
    "    return mad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "6dff0bab-ede3-4b18-b97d-337cbbe36b44",
   "metadata": {},
   "outputs": [],
   "source": [
    "def IQR (vals):\n",
    "    \"\"\"\n",
    "    Calcula el Rango Intercuartil (IQR) de una lista de valores.\n",
    "\n",
    "    Parámetros\n",
    "    ----------\n",
    "    vals: lista de números\n",
    "    » Lista de números de la cual se calculará el IQR.\n",
    "\n",
    "    Retorna\n",
    "    ---------\n",
    "    iqr: float\n",
    "    » El Rango Intercuartil (IQR) de los valores en la lista.\n",
    "\n",
    "    Variables\n",
    "    ----------\n",
    "    datos_ordenados: lista de números\n",
    "    » Una lista de valores ordenados en orden ascendente.\n",
    "    longitud: int\n",
    "    » La cantidad de elementos en la lista 'datos_ordenados'.\n",
    "    Q1: int\n",
    "    » El primer cuartil.\n",
    "    Q3: int\n",
    "    » El tercer cuartil.\n",
    "    iqr: float\n",
    "    » El Rango Intercuartil calculado al restarle el primer cuartil al tercer cuartil.\n",
    "    \"\"\"\n",
    "    datos_ordenados = sorted(vals)\n",
    "    longitud = len(datos_ordenados)\n",
    "    \n",
    "    if longitud // 4 == 0:\n",
    "        Q1 = longitud // 4\n",
    "        Q3 = Q1 * 1\n",
    "    else:\n",
    "        Q1 = (longitud + 1) //4\n",
    "        Q3 = Q1 * 3\n",
    "    \n",
    "    iqr = Q3 - Q1\n",
    "    return iqr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b6478db3-a3e0-4709-8e52-7ab8c86a2b77",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calcular_cuartiles(datos):\n",
    "    \"\"\"\n",
    "    Calcula los cuartiles (Q1, Q2, Q3) de una lista de números.\n",
    "\n",
    "    Parámetros\n",
    "    ----------\n",
    "    datos: lista\n",
    "        Una lista con números ordenados de manera ascendente.\n",
    "\n",
    "    Retorna\n",
    "    -------\n",
    "    Q1, Q2, Q3: float\n",
    "        Los valores de los cuartiles.\n",
    "    \"\"\"\n",
    "    n = len(datos)\n",
    "    if n % 2 == 0:\n",
    "        # Si la cantidad de datos es par, la mediana es el promedio de los dos valores centrales.\n",
    "        medio = n // 2\n",
    "        Q2 = (datos[medio - 1] + datos[medio]) / 2\n",
    "        if medio % 2 == 0:\n",
    "            # Si el índice del valor central es par, se promedian los dos valores adyacentes.\n",
    "            Q1 = (datos[medio // 2 - 1] + datos[medio // 2]) / 2\n",
    "            Q3 = (datos[medio + medio // 2 - 1] + datos[medio + medio // 2]) / 2\n",
    "        else:\n",
    "            # Si el índice del valor central es impar, Q1 se calcula como la mediana de los valores antes del centro,\n",
    "            # y Q3 se calcula como la mediana de los valores después del centro.\n",
    "            Q1 = datos[medio // 2]\n",
    "            Q3 = datos[medio + medio // 2]\n",
    "    else:\n",
    "        # Si la cantidad de datos es impar, la mediana es el valor central.\n",
    "        medio = (n - 1) // 2\n",
    "        Q2 = datos[medio]\n",
    "        if medio % 2 == 0:\n",
    "            # Si el índice del valor central es par, Q1 se calcula como la mediana de los valores antes del centro,\n",
    "            # y Q3 se calcula como la mediana de los valores después del centro.\n",
    "            Q1 = datos[medio // 2]\n",
    "            Q3 = datos[medio + medio // 2]\n",
    "        else:\n",
    "            # Si el índice del valor central es impar, se promedian los dos valores adyacentes.\n",
    "            Q1 = (datos[medio // 2 - 1] + datos[medio // 2]) / 2\n",
    "            Q3 = (datos[medio + medio // 2 - 1] + datos[medio + medio // 2]) / 2\n",
    "\n",
    "    return Q1, Q2, Q3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "a6ca1dc4-cf31-49e9-add5-4678667733b1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
